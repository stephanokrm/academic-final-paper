{"version":3,"sources":["userService.js","teamService.js","CalendarService.js","googleService.js","EventService.js","ActivityService.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjnfile":"services.js","sourcesContent":["angular\n        .module('academic')\n        .factory('userService', ['localStorageService', 'Restangular', function (localStorageService, Restangular) {\n\n                function isLoggedIn() {\n                    return localStorageService.get('user') ? true : false;\n                }\n\n                function authenticate(data, onSuccessActive, onSuccessInactive, onError) {\n                    Restangular.all(laroute.route('users.authenticate')).post(data).then(function (user) {\n                        if (Object.keys(user).length > 0) {\n                            localStorageService.set('user', user);\n                            user.active == true ? onSuccessActive(user) : onSuccessInactive(user);\n                        }\n                    }, function (response) {\n                        onError(response);\n                    });\n\n                }\n\n                function update(userId, data, onSuccess, onError) {\n\n                    Restangular.one(laroute.route('users.update', {users: userId})).customPUT(data).then(function (user) {\n                        localStorageService.set('user', user);\n                        onSuccess(user);\n                    }, function (response) {\n                        onError(response);\n                    });\n\n                }\n\n                function getByTeam(onSuccess, onError) {\n                    Restangular.all(laroute.route('users.byTeam')).getList().then(function (users) {\n                        onSuccess(users);\n                    }, function (response) {\n                        onError(response);\n                    });\n                }\n\n                function logout() {\n                    Restangular.one(laroute.route('users.logout')).get();\n                    localStorageService.clearAll();\n                }\n\n                function getCurrentUser() {\n                    return localStorageService.get('user');\n                }\n\n                function isActive() {\n                    return getCurrentUser().active == true ? true : false;\n                }\n\n                function isTeacher() {\n                    return getCurrentUser().teacher == null ? false : true;\n                }\n\n                return {\n                    isLoggedIn: isLoggedIn,\n                    authenticate: authenticate,\n                    update: update,\n                    logout: logout,\n                    getCurrentUser: getCurrentUser,\n                    isActive: isActive,\n                    isTeacher: isTeacher,\n                    getByTeam: getByTeam\n                };\n\n            }]);\n","(function () {\n    'use strict';\n\n    angular\n            .module('academic')\n            .factory('teamService', teamService);\n\n    teamService.$inject = ['Restangular'];\n    function teamService(Restangular) {\n        var service = {\n            getAll: getAll,\n            getAllFromTeacher: getAllFromTeacher\n        };\n\n        return service;\n\n        function getAll(onSuccess, onError) {\n            Restangular.all(laroute.route('teams.index')).getList().then(function (response) {\n                onSuccess(response);\n            }, function (response) {\n                onError(response);\n            });\n        }\n\n        function getAllFromTeacher(onSuccess, onError) {\n            Restangular.all(laroute.route('teams.create')).getList().then(function (teams) {\n                onSuccess(teams);\n            }, function (response) {\n                onError(response);\n            });\n        }\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n            .module('academic')\n            .factory('CalendarService', CalendarService);\n\n    CalendarService.$inject = ['$http', '$mdToast'];\n    function CalendarService($http, $mdToast) {\n        var service = {\n            getCalendars: getCalendars,\n            storeCalendar: storeCalendar,\n            updateCalendar: updateCalendar,\n            removeCalendar: removeCalendar,\n            getAttendees: getAttendees,\n            getNotAttendees: getNotAttendees,\n            addAttendee: addAttendee,\n            removeAttendee: removeAttendee,\n            showMessage: showMessage\n        };\n\n        return service;\n\n        function getCalendars() {\n            return $http.get(laroute.route('calendars.index'))\n                    .then(getCalendarsComplete)\n                    .catch(getCalendarsFailed);\n\n            function getCalendarsComplete(response) {\n                return response.data;\n            }\n\n            function getCalendarsFailed() {\n                $mdToast.show($mdToast.simple()\n                        .textContent('Ocorreu um erro ao buscar os calendários.')\n                        .position('bottom right')\n                        .hideDelay(4000));\n            }\n        }\n\n        function storeCalendar(calendar) {\n            return $http.post(laroute.route('calendars.store'), calendar)\n                    .then(storeCalendarComplete)\n                    .catch(storeCalendarFailed);\n\n            function storeCalendarComplete(response) {\n                showMessage('Calendário salvo!');\n                return response.data;\n            }\n\n            function storeCalendarFailed() {\n                showMessage('Ocorreu um erro ao buscar os calendários.');\n            }\n        }\n\n        function updateCalendar(calendar) {\n            return $http.put(laroute.route('calendars.update', {calendars: calendar.id}), calendar)\n                    .then(updateCalendarComplete)\n                    .catch(updateCalendarFailed);\n\n            function updateCalendarComplete(response) {\n                showMessage('Calendário editado!');\n                return response.data;\n            }\n\n            function updateCalendarFailed() {\n                showMessage('Ocorreu um erro ao editar o calendário.');\n            }\n        }\n\n        function removeCalendar(calendar) {\n            return $http.delete(laroute.route('calendars.destroy', {calendars: calendar.id}))\n                    .then(removeCalendarComplete)\n                    .catch(removeCalendarFailed);\n\n            function removeCalendarComplete(response) {\n                showMessage('Calendário excluído!');\n                return response.data;\n            }\n\n            function removeCalendarFailed() {\n                showMessage('Ocorreu um erro ao excluir o calendário.');\n            }\n        }\n\n        function getAttendees(calendar) {\n            return $http.get(laroute.route('calendars.attendees', {id: calendar.id}))\n                    .then(getAttendeesComplete)\n                    .catch(getAttendeesFailed);\n\n            function getAttendeesComplete(response) {\n                return response.data;\n            }\n\n            function getAttendeesFailed() {\n                $mdToast.show($mdToast.simple()\n                        .textContent('Ocorreu um erro ao buscar os convidados.')\n                        .position('bottom right')\n                        .hideDelay(4000));\n            }\n        }\n\n        function getNotAttendees(calendar) {\n            return $http.get(laroute.route('calendars.notAttendees', {id: calendar.id}))\n                    .then(getNotAttendeesComplete)\n                    .catch(getNotAttendeesFailed);\n\n            function getNotAttendeesComplete(response) {\n                return response.data;\n            }\n\n            function getNotAttendeesFailed() {\n                $mdToast.show($mdToast.simple()\n                        .textContent('Ocorreu um erro ao buscar os não convidados.')\n                        .position('bottom right')\n                        .hideDelay(4000));\n            }\n        }\n\n        function addAttendee(calendar) {\n            return $http.post(laroute.route('calendars.addAttendee'), calendar)\n                    .then(addAttendeeComplete)\n                    .catch(addAttendeeFailed);\n\n            function addAttendeeComplete(response) {\n                showMessage('Convidado adicionado!');\n                return response.data;\n            }\n\n            function addAttendeeFailed() {\n                showMessage('Ocorreu um erro ao adicionar o convidado.');\n            }\n        }\n\n        function removeAttendee(calendar) {\n            return $http.post(laroute.route('calendars.removeAttendee'), calendar)\n                    .then(removeAttendeeComplete)\n                    .catch(removeAttendeeFailed);\n\n            function removeAttendeeComplete(response) {\n                showMessage('Convidado removido!');\n                return response.data;\n            }\n\n            function removeAttendeeFailed() {\n                showMessage('Ocorreu um erro ao remover o convidado.');\n            }\n        }\n\n        function showMessage(message) {\n            $mdToast.show($mdToast.simple()\n                    .textContent(message)\n                    .position('bottom right')\n                    .hideDelay(4000));\n        }\n\n    }\n\n})();\n","(function () {\n    'use strict';\n\n    angular\n            .module('academic')\n            .factory('GoogleService', GoogleService);\n\n    GoogleService.$inject = ['$http', '$mdToast', 'localStorageService'];\n    function GoogleService($http, $mdToast, localStorageService) {\n        var service = {\n            createAuthUrl: createAuthUrl,\n            getAuthUrl: getAuthUrl,\n            authenticate: authenticate,\n            checkIfIsLogged: checkIfIsLogged,\n            logout: logout,\n            showMessage: showMessage\n        };\n\n        return service;\n\n        function createAuthUrl() {\n            return $http.get(laroute.route('googles.createAuthUrl'))\n                    .then(createAuthUrlComplete)\n                    .catch(createAuthUrlFailed);\n\n            function createAuthUrlComplete(response) {\n                localStorageService.set('url', response.data);\n                return response.data;\n            }\n\n            function createAuthUrlFailed() {\n                showMessage('Ocorreu um erro ao conectar com o Google.');\n            }\n        }\n\n        function authenticate() {\n            return $http.get(laroute.route('googles.authenticate'))\n                    .then(authenticateComplete)\n                    .catch(authenticateFailed);\n\n            function authenticateComplete(response) {\n                localStorageService.set('access_token', response.data);\n                showMessage('Autenticação Google realizada com sucesso!');\n                return response.data;\n            }\n\n            function authenticateFailed() {\n                showMessage('Ocorreu um erro ao conectar com o Google.');\n            }\n        }\n\n        function logout() {\n            return $http.get(laroute.route('googles.logout'))\n                    .then(logoutComplete)\n                    .catch(logoutFailed);\n\n            function logoutComplete(response) {\n                localStorageService.remove('access_token');\n                showMessage('Você saiu do Google!');\n                return response.data;\n            }\n\n            function logoutFailed() {\n                showMessage('Ocorreu um erro ao sair do Google.');\n            }\n        }\n\n        function getAuthUrl() {\n            return localStorageService.get('url');\n        }\n\n        function checkIfIsLogged() {\n            return localStorageService.get('access_token') ? true : false;\n        }\n\n        function showMessage(message) {\n            $mdToast.show($mdToast.simple()\n                    .textContent(message)\n                    .position('bottom right')\n                    .hideDelay(4000));\n        }\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n            .module('academic')\n            .factory('EventService', EventService);\n\n    EventService.$inject = ['$http'];\n    function EventService($http) {\n        var service = {\n            index: index,\n            store: store,\n            update: update,\n            destroy: destroy\n        };\n\n        return service;\n\n        function index(ids, onSuccess, onError, onFinally) {\n            $http.post(laroute.route('events.index'), ids).success(function (events) {\n                onSuccess(events);\n            }).error(function () {\n                onError();\n            }).finally(function () {\n                onFinally();\n            });\n        }\n\n        function store(event, onSuccess, onError, onFinally) {\n            $http.post(laroute.route('events.store'), event).success(function (event) {\n                onSuccess(event);\n            }).error(function () {\n                onError();\n            }).finally(function () {\n                onFinally();\n            });\n        }\n\n        function update(event, onSuccess, onError, onFinally) {\n            $http.put(laroute.route('events.update', {events: event.id}), event).success(function (event) {\n                onSuccess(event);\n            }).error(function () {\n                onError();\n            }).finally(function () {\n                onFinally();\n            });\n        }\n\n        function destroy(event, onSuccess, onError, onFinally) {\n            $http.post(laroute.route('events.destroy', {id: event.id}), event).success(function () {\n                onSuccess();\n            }).error(function () {\n                onError();\n            }).finally(function () {\n                onFinally();\n            });\n        }\n    }\n})();","(function () {\n    'use strict';\n\n    angular\n        .module('academic')\n        .factory('ActivityService', ActivityService);\n\n    ActivityService.$inject = ['$http', '$mdToast'];\n    function ActivityService($http, $mdToast) {\n        let service = {\n            getActivities: getActivities,\n            storeActivity: storeActivity,\n            getActivity: getActivity,\n            updateActivity: updateActivity,\n            removeActivity: removeActivity,\n            showActivity: showActivity,\n            saveDetails: saveDetails,\n            getActivitiesFromStudent: getActivitiesFromStudent\n        };\n\n        return service;\n\n        function getActivities(id) {\n            return $http.get(laroute.route('activities.index', {team: id}))\n                .then(getActivitiesComplete)\n                .catch(getActivitiesFailed);\n\n            function getActivitiesComplete(response) {\n                return response.data;\n            }\n\n            function getActivitiesFailed() {\n                showMessage('Ocorreu um erro ao buscar as atividades.');\n            }\n        }\n\n        function getActivity(id) {\n            return $http.get(laroute.route('activities.edit', {activities: id}))\n                .then(getActivityComplete)\n                .catch(getActivityFailed);\n\n            function getActivityComplete(response) {\n                return response.data;\n            }\n\n            function getActivityFailed() {\n                showMessage('Ocorreu um erro ao buscar a atividade.');\n            }\n        }\n\n        function storeActivity(activity) {\n            return $http.post(laroute.route('activities.store'), activity)\n                .then(storeActivityComplete)\n                .catch(storeActivityFailed);\n\n            function storeActivityComplete(response) {\n                showMessage('Atividade salva!');\n                return response.data;\n            }\n\n            function storeActivityFailed() {\n                showMessage('Ocorreu um erro ao salvar a atividade.');\n            }\n        }\n\n        function updateActivity(activity) {\n            return $http.put(laroute.route('activities.update', {activities: activity.id}), activity)\n                .then(updateActivityComplete)\n                .catch(updateActivityFailed);\n\n            function updateActivityComplete(response) {\n                showMessage('Atividade atualizada!');\n                return response.data;\n            }\n\n            function updateActivityFailed() {\n                showMessage('Ocorreu um erro ao atualizar a atividade.');\n            }\n        }\n\n        function removeActivity(activity) {\n            return $http.delete(laroute.route('activities.destroy', {activities: activity.activity.id}))\n                .then(removeActivityComplete)\n                .catch(removeActivityFailed);\n\n            function removeActivityComplete(response) {\n                showMessage('Atividade removida!');\n                return response.data;\n            }\n\n            function removeActivityFailed() {\n                showMessage('Ocorreu um erro ao remover a atividade.');\n            }\n        }\n\n        function showActivity(id) {\n            return $http.get(laroute.route('activities.show', {activities: id}))\n                .then(showActivityComplete)\n                .catch(showActivityFailed);\n\n            function showActivityComplete(response) {\n                return response.data;\n            }\n\n            function showActivityFailed() {\n                showMessage('Ocorreu um erro ao buscar os detalhes atividade.');\n            }\n        }\n\n        function saveDetails(user, activity) {\n            return $http.post(laroute.route('activities.details', {id: activity.id}), user)\n                .then(saveDetailsComplete)\n                .catch(saveDetailsFailed);\n\n            function saveDetailsComplete(response) {\n                showMessage('Detalhes salvos!');\n                return response.data;\n            }\n\n            function saveDetailsFailed() {\n                showMessage('Ocorreu um erro ao salvar os detalhes.');\n            }\n        }\n\n        function getActivitiesFromStudent() {\n            return $http.get(laroute.route('activities.fromStudent'))\n                .then(getActivitiesFromStudentComplete)\n                .catch(getActivitiesFromStudentFailed);\n\n            function getActivitiesFromStudentComplete(response) {\n                return response.data;\n            }\n\n            function getActivitiesFromStudentFailed(response) {\n                showMessage('Não foi possível buscar as atividades.');\n            }\n        }\n\n        function showMessage(message) {\n            $mdToast.show($mdToast.simple()\n                .textContent(message)\n                .position('bottom right')\n                .hideDelay(4000));\n        }\n    }\n})();"]}