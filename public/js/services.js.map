{"version":3,"sources":["userService.js","teamService.js","CalendarService.js","googleService.js","EventService.js","ActivityService.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjnfile":"services.js","sourcesContent":["angular\r\n        .module('academic')\r\n        .factory('userService', ['localStorageService', 'Restangular', function (localStorageService, Restangular) {\r\n\r\n                function isLoggedIn() {\r\n                    return localStorageService.get('user') ? true : false;\r\n                }\r\n\r\n                function authenticate(data, onSuccessActive, onSuccessInactive, onError) {\r\n                    Restangular.all(laroute.route('users.authenticate')).post(data).then(function (user) {\r\n                        if (Object.keys(user).length > 0) {\r\n                            localStorageService.set('user', user);\r\n                            user.active == true ? onSuccessActive(user) : onSuccessInactive(user);\r\n                        }\r\n                    }, function (response) {\r\n                        onError(response);\r\n                    });\r\n\r\n                }\r\n\r\n                function update(userId, data, onSuccess, onError) {\r\n\r\n                    Restangular.one(laroute.route('users.update', {users: userId})).customPUT(data).then(function (user) {\r\n                        localStorageService.set('user', user);\r\n                        onSuccess(user);\r\n                    }, function (response) {\r\n                        onError(response);\r\n                    });\r\n\r\n                }\r\n\r\n                function getByTeam(onSuccess, onError) {\r\n                    Restangular.all(laroute.route('users.byTeam')).getList().then(function (users) {\r\n                        onSuccess(users);\r\n                    }, function (response) {\r\n                        onError(response);\r\n                    });\r\n                }\r\n\r\n                function logout() {\r\n                    Restangular.one(laroute.route('users.logout')).get();\r\n                    localStorageService.clearAll();\r\n                }\r\n\r\n                function getCurrentUser() {\r\n                    return localStorageService.get('user');\r\n                }\r\n\r\n                function isActive() {\r\n                    return getCurrentUser().active == true ? true : false;\r\n                }\r\n\r\n                function isTeacher() {\r\n                    return getCurrentUser().teacher == null ? false : true;\r\n                }\r\n\r\n                return {\r\n                    isLoggedIn: isLoggedIn,\r\n                    authenticate: authenticate,\r\n                    update: update,\r\n                    logout: logout,\r\n                    getCurrentUser: getCurrentUser,\r\n                    isActive: isActive,\r\n                    isTeacher: isTeacher,\r\n                    getByTeam: getByTeam\r\n                };\r\n\r\n            }]);\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n            .module('academic')\r\n            .factory('teamService', teamService);\r\n\r\n    teamService.$inject = ['Restangular'];\r\n    function teamService(Restangular) {\r\n        var service = {\r\n            getAll: getAll,\r\n            getAllFromTeacher: getAllFromTeacher\r\n        };\r\n\r\n        return service;\r\n\r\n        function getAll(onSuccess, onError) {\r\n            Restangular.all(laroute.route('teams.index')).getList().then(function (response) {\r\n                onSuccess(response);\r\n            }, function (response) {\r\n                onError(response);\r\n            });\r\n        }\r\n\r\n        function getAllFromTeacher(onSuccess, onError) {\r\n            Restangular.all(laroute.route('teams.create')).getList().then(function (teams) {\r\n                onSuccess(teams);\r\n            }, function (response) {\r\n                onError(response);\r\n            });\r\n        }\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n            .module('academic')\r\n            .factory('CalendarService', CalendarService);\r\n\r\n    CalendarService.$inject = ['$http', '$mdToast'];\r\n    function CalendarService($http, $mdToast) {\r\n        var service = {\r\n            getCalendars: getCalendars,\r\n            storeCalendar: storeCalendar,\r\n            updateCalendar: updateCalendar,\r\n            removeCalendar: removeCalendar,\r\n            getAttendees: getAttendees,\r\n            getNotAttendees: getNotAttendees,\r\n            addAttendee: addAttendee,\r\n            removeAttendee: removeAttendee,\r\n            showMessage: showMessage\r\n        };\r\n\r\n        return service;\r\n\r\n        function getCalendars() {\r\n            return $http.get(laroute.route('calendars.index'))\r\n                    .then(getCalendarsComplete)\r\n                    .catch(getCalendarsFailed);\r\n\r\n            function getCalendarsComplete(response) {\r\n                return response.data;\r\n            }\r\n\r\n            function getCalendarsFailed() {\r\n                $mdToast.show($mdToast.simple()\r\n                        .textContent('Ocorreu um erro ao buscar os calendários.')\r\n                        .position('bottom right')\r\n                        .hideDelay(4000));\r\n            }\r\n        }\r\n\r\n        function storeCalendar(calendar) {\r\n            return $http.post(laroute.route('calendars.store'), calendar)\r\n                    .then(storeCalendarComplete)\r\n                    .catch(storeCalendarFailed);\r\n\r\n            function storeCalendarComplete(response) {\r\n                showMessage('Calendário salvo!');\r\n                return response.data;\r\n            }\r\n\r\n            function storeCalendarFailed() {\r\n                showMessage('Ocorreu um erro ao buscar os calendários.');\r\n            }\r\n        }\r\n\r\n        function updateCalendar(calendar) {\r\n            return $http.put(laroute.route('calendars.update', {calendars: calendar.id}), calendar)\r\n                    .then(updateCalendarComplete)\r\n                    .catch(updateCalendarFailed);\r\n\r\n            function updateCalendarComplete(response) {\r\n                showMessage('Calendário editado!');\r\n                return response.data;\r\n            }\r\n\r\n            function updateCalendarFailed() {\r\n                showMessage('Ocorreu um erro ao editar o calendário.');\r\n            }\r\n        }\r\n\r\n        function removeCalendar(calendar) {\r\n            return $http.delete(laroute.route('calendars.destroy', {calendars: calendar.id}))\r\n                    .then(removeCalendarComplete)\r\n                    .catch(removeCalendarFailed);\r\n\r\n            function removeCalendarComplete(response) {\r\n                showMessage('Calendário excluído!');\r\n                return response.data;\r\n            }\r\n\r\n            function removeCalendarFailed() {\r\n                showMessage('Ocorreu um erro ao excluir o calendário.');\r\n            }\r\n        }\r\n\r\n        function getAttendees(calendar) {\r\n            return $http.get(laroute.route('calendars.attendees', {id: calendar.id}))\r\n                    .then(getAttendeesComplete)\r\n                    .catch(getAttendeesFailed);\r\n\r\n            function getAttendeesComplete(response) {\r\n                return response.data;\r\n            }\r\n\r\n            function getAttendeesFailed() {\r\n                $mdToast.show($mdToast.simple()\r\n                        .textContent('Ocorreu um erro ao buscar os convidados.')\r\n                        .position('bottom right')\r\n                        .hideDelay(4000));\r\n            }\r\n        }\r\n\r\n        function getNotAttendees(calendar) {\r\n            return $http.get(laroute.route('calendars.notAttendees', {id: calendar.id}))\r\n                    .then(getNotAttendeesComplete)\r\n                    .catch(getNotAttendeesFailed);\r\n\r\n            function getNotAttendeesComplete(response) {\r\n                return response.data;\r\n            }\r\n\r\n            function getNotAttendeesFailed() {\r\n                $mdToast.show($mdToast.simple()\r\n                        .textContent('Ocorreu um erro ao buscar os não convidados.')\r\n                        .position('bottom right')\r\n                        .hideDelay(4000));\r\n            }\r\n        }\r\n\r\n        function addAttendee(calendar) {\r\n            return $http.post(laroute.route('calendars.addAttendee'), calendar)\r\n                    .then(addAttendeeComplete)\r\n                    .catch(addAttendeeFailed);\r\n\r\n            function addAttendeeComplete(response) {\r\n                showMessage('Convidado adicionado!');\r\n                return response.data;\r\n            }\r\n\r\n            function addAttendeeFailed() {\r\n                showMessage('Ocorreu um erro ao adicionar o convidado.');\r\n            }\r\n        }\r\n\r\n        function removeAttendee(calendar) {\r\n            return $http.post(laroute.route('calendars.removeAttendee'), calendar)\r\n                    .then(removeAttendeeComplete)\r\n                    .catch(removeAttendeeFailed);\r\n\r\n            function removeAttendeeComplete(response) {\r\n                showMessage('Convidado removido!');\r\n                return response.data;\r\n            }\r\n\r\n            function removeAttendeeFailed() {\r\n                showMessage('Ocorreu um erro ao remover o convidado.');\r\n            }\r\n        }\r\n\r\n        function showMessage(message) {\r\n            $mdToast.show($mdToast.simple()\r\n                    .textContent(message)\r\n                    .position('bottom right')\r\n                    .hideDelay(4000));\r\n        }\r\n\r\n    }\r\n\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n            .module('academic')\r\n            .factory('GoogleService', GoogleService);\r\n\r\n    GoogleService.$inject = ['$http', '$mdToast', 'localStorageService'];\r\n    function GoogleService($http, $mdToast, localStorageService) {\r\n        var service = {\r\n            createAuthUrl: createAuthUrl,\r\n            getAuthUrl: getAuthUrl,\r\n            authenticate: authenticate,\r\n            checkIfIsLogged: checkIfIsLogged,\r\n            logout: logout,\r\n            showMessage: showMessage\r\n        };\r\n\r\n        return service;\r\n\r\n        function createAuthUrl() {\r\n            return $http.get(laroute.route('googles.createAuthUrl'))\r\n                    .then(createAuthUrlComplete)\r\n                    .catch(createAuthUrlFailed);\r\n\r\n            function createAuthUrlComplete(response) {\r\n                localStorageService.set('url', response.data);\r\n                return response.data;\r\n            }\r\n\r\n            function createAuthUrlFailed() {\r\n                showMessage('Ocorreu um erro ao conectar com o Google.');\r\n            }\r\n        }\r\n\r\n        function authenticate() {\r\n            return $http.get(laroute.route('googles.authenticate'))\r\n                    .then(authenticateComplete)\r\n                    .catch(authenticateFailed);\r\n\r\n            function authenticateComplete(response) {\r\n                localStorageService.set('access_token', response.data);\r\n                showMessage('Autenticação Google realizada com sucesso!');\r\n                return response.data;\r\n            }\r\n\r\n            function authenticateFailed() {\r\n                showMessage('Ocorreu um erro ao conectar com o Google.');\r\n            }\r\n        }\r\n\r\n        function logout() {\r\n            return $http.get(laroute.route('googles.logout'))\r\n                    .then(logoutComplete)\r\n                    .catch(logoutFailed);\r\n\r\n            function logoutComplete(response) {\r\n                localStorageService.remove('access_token');\r\n                showMessage('Você saiu do Google!');\r\n                return response.data;\r\n            }\r\n\r\n            function logoutFailed() {\r\n                showMessage('Ocorreu um erro ao sair do Google.');\r\n            }\r\n        }\r\n\r\n        function getAuthUrl() {\r\n            return localStorageService.get('url');\r\n        }\r\n\r\n        function checkIfIsLogged() {\r\n            return localStorageService.get('access_token') ? true : false;\r\n        }\r\n\r\n        function showMessage(message) {\r\n            $mdToast.show($mdToast.simple()\r\n                    .textContent(message)\r\n                    .position('bottom right')\r\n                    .hideDelay(4000));\r\n        }\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n            .module('academic')\r\n            .factory('EventService', EventService);\r\n\r\n    EventService.$inject = ['$http'];\r\n    function EventService($http) {\r\n        var service = {\r\n            index: index,\r\n            store: store,\r\n            update: update,\r\n            destroy: destroy\r\n        };\r\n\r\n        return service;\r\n\r\n        function index(ids, onSuccess, onError, onFinally) {\r\n            $http.post(laroute.route('events.index'), ids).success(function (events) {\r\n                onSuccess(events);\r\n            }).error(function () {\r\n                onError();\r\n            }).finally(function () {\r\n                onFinally();\r\n            });\r\n        }\r\n\r\n        function store(event, onSuccess, onError, onFinally) {\r\n            $http.post(laroute.route('events.store'), event).success(function (event) {\r\n                onSuccess(event);\r\n            }).error(function () {\r\n                onError();\r\n            }).finally(function () {\r\n                onFinally();\r\n            });\r\n        }\r\n\r\n        function update(event, onSuccess, onError, onFinally) {\r\n            $http.put(laroute.route('events.update', {events: event.id}), event).success(function (event) {\r\n                onSuccess(event);\r\n            }).error(function () {\r\n                onError();\r\n            }).finally(function () {\r\n                onFinally();\r\n            });\r\n        }\r\n\r\n        function destroy(event, onSuccess, onError, onFinally) {\r\n            $http.post(laroute.route('events.destroy', {id: event.id}), event).success(function () {\r\n                onSuccess();\r\n            }).error(function () {\r\n                onError();\r\n            }).finally(function () {\r\n                onFinally();\r\n            });\r\n        }\r\n    }\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n            .module('academic')\r\n            .factory('ActivityService', ActivityService);\r\n\r\n    ActivityService.$inject = ['$http', '$mdToast'];\r\n    function ActivityService($http, $mdToast) {\r\n        var service = {\r\n            getActivities: getActivities,\r\n            storeActivity: storeActivity,\r\n            getActivity: getActivity,\r\n            updateActivity: updateActivity,\r\n            removeActivity: removeActivity,\r\n            showActivity: showActivity,\r\n            saveDetails: saveDetails\r\n        };\r\n\r\n        return service;\r\n\r\n        function getActivities(id) {\r\n            return $http.get(laroute.route('activities.index', {team: id}))\r\n                    .then(getActivitiesComplete)\r\n                    .catch(getActivitiesFailed);\r\n\r\n            function getActivitiesComplete(response) {\r\n                return response.data;\r\n            }\r\n\r\n            function getActivitiesFailed() {\r\n                showMessage('Ocorreu um erro ao buscar as atividades.');\r\n            }\r\n        }\r\n\r\n        function getActivity(id) {\r\n            return $http.get(laroute.route('activities.edit', {activities: id}))\r\n                    .then(getActivityComplete)\r\n                    .catch(getActivityFailed);\r\n\r\n            function getActivityComplete(response) {\r\n                return response.data;\r\n            }\r\n\r\n            function getActivityFailed() {\r\n                showMessage('Ocorreu um erro ao buscar a atividade.');\r\n            }\r\n        }\r\n\r\n        function storeActivity(activity) {\r\n            return $http.post(laroute.route('activities.store'), activity)\r\n                    .then(storeActivityComplete)\r\n                    .catch(storeActivityFailed);\r\n\r\n            function storeActivityComplete(response) {\r\n                showMessage('Atividade salva!');\r\n                return response.data;\r\n            }\r\n\r\n            function storeActivityFailed() {\r\n                showMessage('Ocorreu um erro ao salvar a atividade.');\r\n            }\r\n        }\r\n\r\n        function updateActivity(activity) {\r\n            return $http.put(laroute.route('activities.update', {activities: activity.id}), activity)\r\n                    .then(updateActivityComplete)\r\n                    .catch(updateActivityFailed);\r\n\r\n            function updateActivityComplete(response) {\r\n                showMessage('Atividade atualizada!');\r\n                return response.data;\r\n            }\r\n\r\n            function updateActivityFailed() {\r\n                showMessage('Ocorreu um erro ao atualizar a atividade.');\r\n            }\r\n        }\r\n\r\n        function removeActivity(activity) {\r\n            return $http.delete(laroute.route('activities.destroy', {activities: activity.activity.id}))\r\n                    .then(removeActivityComplete)\r\n                    .catch(removeActivityFailed);\r\n\r\n            function removeActivityComplete(response) {\r\n                showMessage('Atividade removida!');\r\n                return response.data;\r\n            }\r\n\r\n            function removeActivityFailed() {\r\n                showMessage('Ocorreu um erro ao remover a atividade.');\r\n            }\r\n        }\r\n\r\n        function showActivity(id) {\r\n            return $http.get(laroute.route('activities.show', {activities: id}))\r\n                    .then(showActivityComplete)\r\n                    .catch(showActivityFailed);\r\n\r\n            function showActivityComplete(response) {\r\n                return response.data;\r\n            }\r\n\r\n            function showActivityFailed() {\r\n                showMessage('Ocorreu um erro ao buscar os detalhes atividade.');\r\n            }\r\n        }\r\n\r\n        function saveDetails(user, activity) {\r\n            return $http.post(laroute.route('activities.details', {id: activity.id}), user)\r\n                    .then(saveDetailsComplete)\r\n                    .catch(saveDetailsFailed);\r\n\r\n            function saveDetailsComplete(response) {\r\n                showMessage('Detalhes salvos!');\r\n                return response.data;\r\n            }\r\n\r\n            function saveDetailsFailed() {\r\n                showMessage('Ocorreu um erro ao salvar os detalhes.');\r\n            }\r\n        }\r\n\r\n        function showMessage(message) {\r\n            $mdToast.show($mdToast.simple()\r\n                    .textContent(message)\r\n                    .position('bottom right')\r\n                    .hideDelay(4000));\r\n        }\r\n    }\r\n})();"],"sourceRoot":"/source/"}