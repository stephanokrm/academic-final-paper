{"version":3,"sources":["app.module.js","app.routes.js","app.others.js"],"names":[],"mappingsrGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.js","sourcesContent":["angular.module('academic', [\r\n    'ngMaterial',\r\n    'ngMessages',\r\n    'ngAnimate',\r\n    'LocalStorageModule',\r\n    'ui.utils.masks',\r\n    'ui.router',\r\n    'ui.calendar',\r\n    'restangular',\r\n    'angular-loading-bar'\r\n]);","angular\r\n        .module('academic')\r\n        .constant('ROUTE', 'http://webacademico.canoas.ifrs.edu.br/~academic/index.php/')\r\n        .config(['$stateProvider', '$urlRouterProvider', '$locationProvider', function ($stateProvider, $urlRouterProvider, $locationProvider) {\r\n                $locationProvider.html5Mode(true);\r\n                $urlRouterProvider.otherwise('/');\r\n                $stateProvider.\r\n                        state('login', {\r\n                            url: '/login',\r\n                            templateUrl: 'views/user/userLogin.html',\r\n                            controller: 'LoginController',\r\n                            controllerAs: 'vm',\r\n                            authorize: false,\r\n                            authorize_google: false\r\n                        }).\r\n                        state('register', {\r\n                            url: '/registro',\r\n                            templateUrl: 'views/user/userRegister.html',\r\n                            controller: 'RegisterController',\r\n                            authorize: true,\r\n                            authorize_google: false\r\n                        }).\r\n                        state('calendars', {\r\n                            url: '/calendarios',\r\n                            templateUrl: 'views/calendar/calendarIndex.html',\r\n                            controller: 'CalendarController',\r\n                            controllerAs: 'vm',\r\n                            authorize: true,\r\n                            authorize_google: true\r\n                        }).\r\n                        state('home', {\r\n                            url: '/',\r\n                            templateUrl: 'views/home.html',\r\n                            controller: 'HomeController',\r\n                            authorize: true,\r\n                            authorize_google: false\r\n                        }).\r\n                        state('activitiesIndex', {\r\n                            url: '/turma/:id/atividades',\r\n                            templateUrl: 'views/activity/index.html',\r\n                            controller: 'ActivityIndexController',\r\n                            controllerAs: 'vm',\r\n                            authorize: true,\r\n                            authorize_google: true\r\n                        }).\r\n                        state('activitiesCreate', {\r\n                            url: '/turma/:id/atividades/criar',\r\n                            templateUrl: 'views/activity/create.html',\r\n                            controller: 'ActivityCreateController',\r\n                            controllerAs: 'vm',\r\n                            authorize: true,\r\n                            authorize_google: true\r\n                        }).\r\n                        state('activitiesEdit', {\r\n                            url: '/atividades/:id/editar',\r\n                            templateUrl: 'views/activity/edit.html',\r\n                            controller: 'ActivityEditController',\r\n                            controllerAs: 'vm',\r\n                            authorize: true,\r\n                            authorize_google: true\r\n                        }).\r\n                        state('activitiesShow', {\r\n                            url: '/atividades/:id/detalhes',\r\n                            templateUrl: 'views/activity/show.html',\r\n                            controller: 'ActivityShowController',\r\n                            controllerAs: 'vm',\r\n                            authorize: true,\r\n                            authorize_google: true\r\n                        }).\r\n                        state('teamsIndex', {\r\n                            url: '/turmas',\r\n                            templateUrl: 'views/team/index.html',\r\n                            controller: 'TeamIndexController as vm',\r\n                            authorize: true,\r\n                            authorize_google: false\r\n                        });\r\n            }])\r\n        .run([\"$rootScope\", \"$location\", '$window', '$mdToast', 'userService', 'GoogleService', 'localStorageService', function ($rootScope, $location, $window, $mdToast, userService, GoogleService, localStorageService) {\r\n                $rootScope.google_authenticated = GoogleService.checkIfIsLogged();\r\n                $rootScope.googleUrl = GoogleService.getAuthUrl();\r\n                $rootScope.$on(\"$stateChangeStart\", function (e, toState, toParams, fromState, fromParams) {\r\n                    $rootScope.authenticated = false;\r\n                    if (toState.authorize === true) {\r\n                        if (userService.isLoggedIn()) {\r\n                            $rootScope.isTeacher = userService.isTeacher();\r\n                            if (userService.isActive()) {\r\n                                $rootScope.authenticated = true;\r\n                                $rootScope.user = userService.getCurrentUser();\r\n                            }\r\n                        } else {\r\n                            $location.path(\"/login\");\r\n                        }\r\n                    }\r\n                    if (toState.authorize_google === true) {\r\n                        if (!GoogleService.checkIfIsLogged()) {\r\n                            localStorageService.set('requestedUrl', toState.url);\r\n                            e.preventDefault();\r\n                            $window.location.href = GoogleService.getAuthUrl();\r\n                        }\r\n                    }\r\n                });\r\n            }]);","/* global NaN, moment */\r\n\r\nangular\r\n        .module('academic')\r\n        .constant('DEFAULT_ERROR_MESSAGE', 'Algo deu errado. Verifique novamente mais tarde.');\r\n\r\nangular\r\n        .module('academic')\r\n        .config(function ($mdThemingProvider) {\r\n            $mdThemingProvider.theme('default')\r\n                    .primaryPalette('light-blue', {\r\n                        'default': '600'\r\n                    })\r\n                    .accentPalette('light-blue', {\r\n                        'default': '700'\r\n                    });\r\n        });\r\n\r\nangular\r\n        .module('academic')\r\n        .config(function ($mdDateLocaleProvider) {\r\n            $mdDateLocaleProvider.months = ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', ' Dezembro'];\r\n            $mdDateLocaleProvider.shortMonths = ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', ' Dez'];\r\n            $mdDateLocaleProvider.days = ['Domingo', 'Segunda', 'Terça', 'Quarta', 'Quinta', 'Sexta', 'Sábado'];\r\n            $mdDateLocaleProvider.shortDays = ['Do', 'Se', 'Te', 'Qu', 'Qu', 'Se', 'Sá'];\r\n            $mdDateLocaleProvider.firstDayOfWeek = 1;\r\n\r\n            $mdDateLocaleProvider.formatDate = function (date) {\r\n                return date ? moment(date).format('DD/MM/YYYY') : '';\r\n            };\r\n\r\n            $mdDateLocaleProvider.parseDate = function (dateString) {\r\n                var m = moment(dateString, 'DD/MM/YYYY', true);\r\n                return m.isValid() ? m.toDate() : new Date(NaN);\r\n            };\r\n        });\r\n\r\nangular.module('academic')\r\n        .config(['cfpLoadingBarProvider', function (cfpLoadingBarProvider) {\r\n                cfpLoadingBarProvider.includeSpinner = false;\r\n            }]);\r\n\r\n\r\n"],"sourceRoot":"/source/"}