{"version":3,"sources":["app.module.js","app.routes.js","app.others.js"],"names":[],"mappingspGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.js","sourcesContent":["angular.module('academic', [\n    'ngMaterial',\n    'ngMessages',\n    'ngAnimate',\n    'LocalStorageModule',\n    'ui.utils.masks',\n    'ui.router',\n    'ui.calendar',\n    'restangular',\n    'angular-loading-bar'\n]);","angular\n    .module('academic')\n    .constant('ROUTE', 'http://localhost:8000/')\n    .config(['$stateProvider', '$urlRouterProvider', '$locationProvider', function ($stateProvider, $urlRouterProvider, $locationProvider) {\n        $locationProvider.html5Mode(true);\n        $urlRouterProvider.otherwise('/');\n        $stateProvider.state('login', {\n            url: '/login',\n            templateUrl: 'views/user/userLogin.html',\n            controller: 'LoginController',\n            controllerAs: 'vm',\n            authorize: false,\n            authorize_google: false\n        }).state('register', {\n            url: '/registro',\n            templateUrl: 'views/user/userRegister.html',\n            controller: 'RegisterController',\n            authorize: true,\n            authorize_google: false\n        }).state('calendars', {\n            url: '/calendarios',\n            templateUrl: 'views/calendar/calendarIndex.html',\n            controller: 'CalendarController',\n            controllerAs: 'vm',\n            authorize: true,\n            authorize_google: true\n        }).state('home', {\n            url: '/',\n            templateUrl: 'views/home.html',\n            controller: 'HomeController',\n            authorize: true,\n            authorize_google: false\n        }).state('activitiesIndex', {\n            url: '/turma/:id/atividades',\n            templateUrl: 'views/activity/index.html',\n            controller: 'ActivityIndexController',\n            controllerAs: 'vm',\n            authorize: true,\n            authorize_google: true\n        }).state('activitiesCreate', {\n            url: '/turma/:id/atividades/criar',\n            templateUrl: 'views/activity/create.html',\n            controller: 'ActivityCreateController',\n            controllerAs: 'vm',\n            authorize: true,\n            authorize_google: true\n        }).state('activitiesEdit', {\n            url: '/atividades/:id/editar',\n            templateUrl: 'views/activity/edit.html',\n            controller: 'ActivityEditController',\n            controllerAs: 'vm',\n            authorize: true,\n            authorize_google: true\n        }).state('activitiesShow', {\n            url: '/atividades/:id/detalhes',\n            templateUrl: 'views/activity/show.html',\n            controller: 'ActivityShowController',\n            controllerAs: 'vm',\n            authorize: true,\n            authorize_google: true\n        }).state('teamsIndex', {\n            url: '/turmas',\n            templateUrl: 'views/team/index.html',\n            controller: 'TeamIndexController as vm',\n            authorize: true,\n            authorize_google: false\n        }).state('userGrades', {\n            url: '/notas',\n            templateUrl: 'views/user/userGrades.html',\n            controller: 'GradesController as vm',\n            authorize: true,\n            authorize_google: true\n        });\n    }])\n    .run([\"$rootScope\", \"$location\", '$window', '$mdToast', 'userService', 'GoogleService', 'localStorageService', function ($rootScope, $location, $window, $mdToast, userService, GoogleService, localStorageService) {\n        $rootScope.google_authenticated = GoogleService.checkIfIsLogged();\n        $rootScope.googleUrl = GoogleService.getAuthUrl();\n        $rootScope.$on(\"$stateChangeStart\", function (e, toState) {\n            $rootScope.authenticated = false;\n            if (toState.authorize === true) {\n                if (userService.isLoggedIn()) {\n                    $rootScope.isTeacher = userService.isTeacher();\n                    if (userService.isActive()) {\n                        $rootScope.authenticated = true;\n                        $rootScope.user = userService.getCurrentUser();\n                    } else {\n                        $location.path(\"/registro\");\n                    }\n                } else {\n                    $location.path(\"/login\");\n                }\n            }\n            if (toState.authorize_google === true) {\n                if (!GoogleService.checkIfIsLogged()) {\n                    localStorageService.set('requestedUrl', toState.url);\n                    e.preventDefault();\n                    $window.location.href = GoogleService.getAuthUrl();\n                }\n            }\n        });\n    }]);","/* global NaN, moment */\n\nangular\n        .module('academic')\n        .constant('DEFAULT_ERROR_MESSAGE', 'Algo deu errado. Verifique novamente mais tarde.');\n\nangular\n        .module('academic')\n        .config(function ($mdThemingProvider) {\n            $mdThemingProvider.theme('default')\n                    .primaryPalette('light-blue', {\n                        'default': '600'\n                    })\n                    .accentPalette('light-blue', {\n                        'default': '700'\n                    });\n        });\n\nangular\n        .module('academic')\n        .config(function ($mdDateLocaleProvider) {\n            $mdDateLocaleProvider.months = ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', ' Dezembro'];\n            $mdDateLocaleProvider.shortMonths = ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', ' Dez'];\n            $mdDateLocaleProvider.days = ['Domingo', 'Segunda', 'Terça', 'Quarta', 'Quinta', 'Sexta', 'Sábado'];\n            $mdDateLocaleProvider.shortDays = ['Do', 'Se', 'Te', 'Qu', 'Qu', 'Se', 'Sá'];\n            $mdDateLocaleProvider.firstDayOfWeek = 1;\n\n            $mdDateLocaleProvider.formatDate = function (date) {\n                return date ? moment(date).format('DD/MM/YYYY') : '';\n            };\n\n            $mdDateLocaleProvider.parseDate = function (dateString) {\n                var m = moment(dateString, 'DD/MM/YYYY', true);\n                return m.isValid() ? m.toDate() : new Date(NaN);\n            };\n        });\n\nangular.module('academic')\n        .config(['cfpLoadingBarProvider', function (cfpLoadingBarProvider) {\n                cfpLoadingBarProvider.includeSpinner = false;\n            }]);\n\n\n"]}