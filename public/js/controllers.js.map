{"version":3,"sources":["loginController.js","registerController.js","CalendarController.js","ActivityIndexController.js","ActivityCreateController.js","ActivityEditController.js","ActivityShowController.js","GradesController.js","TeamIndexController.js","navController.js","homeController.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"controllers.js","sourcesContent":["(function () {\n    'use strict';\n\n    angular\n            .module('academic')\n            .controller('LoginController', LoginController);\n\n    LoginController.$inject = ['$state', '$rootScope', '$mdToast', 'userService', 'GoogleService'];\n    function LoginController($state, $rootScope, $mdToast, userService, GoogleService) {\n        var vm = this;\n        vm.user = {};\n        vm.doLogin = doLogin;\n\n        function doLogin() {\n            GoogleService.createAuthUrl().then(function (url) { \n                $rootScope.googleUrl = url;\n                return $rootScope.googleUrl;\n            });\n\n            userService.authenticate(\n                    vm.user,\n                    function () {\n                        showToast('Login efetuado com sucesso!');\n                        $state.go('home');\n                    },\n                    function () {\n                        $state.go('register');\n                    },\n                    function (response) {\n                        showToast(response.data.authentication);\n                        vm.user.password = '';\n                    }\n            );\n        }\n\n        function showToast(message) {\n            $mdToast.show($mdToast.simple()\n                    .textContent(message)\n                    .position('bottom right')\n                    .hideDelay(4000));\n        }\n    }\n\n})();","angular\n        .module('academic')\n        .controller('RegisterController', ['$scope', '$location', '$mdToast', 'userService', 'teamService', '$rootScope', function ($scope, $location, $mdToast, userService, teamService, $rootScope) {\n\n                function showToast(message) {\n                    $mdToast.show($mdToast.simple()\n                            .textContent(message)\n                            .position('bottom right')\n                            .hideDelay(4000));\n                }\n\n                $scope.userName = userService.getCurrentUser().name;\n\n                teamService.getAll(function (response) {\n                    $scope.teams = response;\n                }, function () {\n                    showToast('Ocorreram alguns erros durante a comunicação com o serviço. Tente mais tarde.');\n                });\n\n                $scope.doRegister = function () {\n                    userService.update(\n                            userService.getCurrentUser().id,\n                            $scope.user,\n                            function (response) {\n                                showToast('Registro efetuado com sucesso!');\n                                $location.path('/');\n                            },\n                            function (response) {\n                                showToast('Login efetuado com sucesso!');\n                                alert('Algo deu errado com o processo de registro. Tente mais tarde.');\n                            });\n\n                };\n            }]);","(function () {\n    'use strict';\n\n    angular\n            .module('academic')\n            .controller('CalendarController', CalendarController);\n\n    CalendarController.$inject = ['$timeout', '$rootScope', '$mdToast', '$mdDialog', 'CalendarService', 'teamService', 'userService', 'EventService', 'DEFAULT_ERROR_MESSAGE'];\n    function CalendarController($timeout, $rootScope, $mdToast, $mdDialog, CalendarService, teamService, userService, EventService, DEFAULT_ERROR_MESSAGE) {\n        var vm = this;\n        var index;\n        var emails = [];\n        var calendarIds = [];\n        var colors = [];\n        var selectedColor;\n        var calendarElement = $('#calendar');\n        var color = {\n            \"1\": {\"background\": \"#a4bdfc\", \"foreground\": \"#1d1d1d\", \"name\": \"Azul Claro\"},\n            \"2\": {\"background\": \"#7ae7bf\", \"foreground\": \"#1d1d1d\", \"name\": \"Cerceta\"},\n            \"3\": {\"background\": \"#dbadff\", \"foreground\": \"#1d1d1d\", \"name\": \"Roxo\"},\n            \"4\": {\"background\": \"#ff887c\", \"foreground\": \"#1d1d1d\", \"name\": \"Rosa\"},\n            \"5\": {\"background\": \"#fbd75b\", \"foreground\": \"#1d1d1d\", \"name\": \"Amarelo\"},\n            \"6\": {\"background\": \"#ffb878\", \"foreground\": \"#1d1d1d\", \"name\": \"Laranja\"},\n            \"7\": {\"background\": \"#46d6db\", \"foreground\": \"#1d1d1d\", \"name\": \"Ciano\"},\n            \"8\": {\"background\": \"#e1e1e1\", \"foreground\": \"#1d1d1d\", \"name\": \"Cinza\"},\n            \"9\": {\"background\": \"#5484ed\", \"foreground\": \"#1d1d1d\", \"name\": \"Azul\"},\n            \"10\": {\"background\": \"#51b749\", \"foreground\": \"#1d1d1d\", \"name\": \"Verde\"},\n            \"11\": {\"background\": \"#dc2127\", \"foreground\": \"#1d1d1d\", \"name\": \"Vermelho\"}\n        };\n        $rootScope.pageTitle = 'Calendários';\n\n        vm.agendaDay = true;\n\n        for (var id in color) {\n            colors.push(color[id]);\n        }\n\n        getCalendars();\n\n        $timeout(function () {\n            calendarElement.fullCalendar('render');\n            bindFullcalendarViewTitle();\n        }, 0);\n\n        vm.uiConfig = {\n            calendar: {\n                displayEventTime: false,\n                height: 'auto',\n                editable: false,\n                droppable: false,\n                titleFormat: 'DD - MMMM YYYY',\n                lang: 'pt-br',\n                events: {\n                    url: laroute.route('events.index'),\n                    type: 'post',\n                    data: function () {\n                        return {\n                            ids: getIds()\n                        };\n                    },\n                    error: function () {\n                        alert('error');\n                    }\n                },\n                header: {left: '', center: '', right: ''},\n                eventClick: function (event, jsEvent, view) {\n                    editEvent(event);\n                },\n                dayClick: function (date, jsEvent, view) {\n                    vm.createEvent(date);\n                },\n                views: {\n                    month: {titleFormat: 'MMMM YYYY'},\n                    week: {titleFormat: 'MMM DD, YYYY'},\n                    day: {titleFormat: 'MMMM DD, YYYY'}\n                }\n            }\n        };\n\n        vm.calendarAction = function (action) {\n            calendarElement.fullCalendar(action);\n            bindFullcalendarViewTitle();\n        };\n\n        vm.changeView = function (view) {\n            switch (view) {\n                case 'agendaDay':\n                    vm.agendaDay = false;\n                    vm.agendaWeek = true;\n                    break;\n                case 'agendaWeek':\n                    vm.agendaWeek = false;\n                    vm.month = true;\n                    break;\n                case 'month':\n                    vm.month = false;\n                    vm.agendaDay = true;\n                    break;\n            }\n\n            calendarElement.fullCalendar('changeView', view);\n            bindFullcalendarViewTitle();\n        };\n\n        vm.refrashEvents = function () {\n            refreshEvents();\n        };\n\n        vm.createCalendar = function () {\n            $mdDialog.show({\n                controller: CalendarCreateDialogController,\n                controllerAs: 'vm',\n                templateUrl: 'views/calendar/calendarCreate.html',\n                parent: angular.element(document.body),\n                clickOutsideToClose: true,\n                fullscreen: true\n            });\n        };\n\n        vm.editCalendar = function (calendar) {\n            $mdDialog.show({\n                controller: CalendarEditDialogController,\n                controllerAs: 'vm',\n                templateUrl: 'views/calendar/calendarEdit.html',\n                parent: angular.element(document.body),\n                clickOutsideToClose: true,\n                fullscreen: true,\n                locals: {calendar: calendar}\n            });\n        };\n\n        vm.destroyCalendar = function (calendar) {\n            CalendarService.removeCalendar(calendar).then(function () {\n                getCalendars();\n            });\n        };\n\n        vm.createEvent = function (date) {\n            $mdDialog.show({\n                controller: EventDialogController,\n                controllerAs: 'vm',\n                templateUrl: 'views/event/eventForm.html',\n                parent: angular.element(document.body),\n                clickOutsideToClose: true,\n                fullscreen: true,\n                locals: {date: date, calendars: vm.calendars}\n            });\n        };\n\n        function editEvent(event) {\n            $mdDialog.show({\n                controller: EventDialogController,\n                controllerAs: 'vm',\n                templateUrl: 'views/event/eventForm.html',\n                parent: angular.element(document.body),\n                clickOutsideToClose: true,\n                fullscreen: true,\n                locals: {calendars: vm.calendars, event: event}\n            });\n        }\n\n        function bindFullcalendarViewTitle() {\n            vm.viewTitle = calendarElement.fullCalendar('getView').title;\n        }\n\n        function showMessageToast(message) {\n            $mdToast.show($mdToast.simple()\n                    .textContent(message)\n                    .position('bottom right')\n                    .hideDelay(4000));\n        }\n\n        function refreshEvents() {\n            calendarElement.fullCalendar('refetchEvents');\n            $rootScope.isActionLoading = false;\n        }\n\n        function getCalendars() {\n            return CalendarService.getCalendars().then(function (calendars) {\n                vm.calendars = calendars;\n                refreshEvents();\n                return vm.calendars;\n            });\n        }\n\n        function getIds() {\n            calendarIds = [];\n\n            angular.forEach(vm.calendars, function (calendar) {\n                if (calendar.selected == true) {\n                    calendarIds.push(calendar.id);\n                }\n            });\n\n            return calendarIds;\n        }\n\n        function CalendarCreateDialogController($mdDialog) {\n            var vm = this;\n            vm.calendarCreate = {};\n            vm.calendarCreate.attendees = [];\n            vm.isTeacher = userService.isTeacher();\n            vm.storeCalendar = storeCalendar;\n            vm.toggleUser = toggleUser;\n\n            if (userService.isTeacher()) {\n                teamService.getAllFromTeacher(function (teams) {\n                    $rootScope.isActionLoading = false;\n                    vm.teams = teams;\n                }, function () {\n                    showMessageToast(DEFAULT_ERROR_MESSAGE);\n                });\n            } else {\n                userService.getByTeam(function (users) {\n                    $rootScope.isActionLoading = false;\n                    vm.users = users;\n                }, function () {\n                    showMessageToast(DEFAULT_ERROR_MESSAGE);\n                });\n            }\n\n            vm.closeModal = function () {\n                $mdDialog.hide();\n            };\n\n            function storeCalendar() {\n                CalendarService.storeCalendar(vm.calendarCreate).then(function () {\n                    getCalendars();\n                    $mdDialog.hide();\n                });\n            }\n\n            function toggleUser(user) {\n                index = emails.indexOf(user.email);\n                user.selected ? vm.calendarCreate.attendees.push(user.email) : vm.calendarCreate.attendees.splice(index, 1);\n            }\n        }\n\n        function CalendarEditDialogController($mdDialog, locals) {\n            var vm = this;\n            vm.calendarEdit = locals.calendar;\n            vm.isTeacher = userService.isTeacher();\n\n            vm.toggleUser = function (attendee) {\n                index = emails.indexOf(attendee.email);\n                attendee.selected ? emails.push(attendee.email) : emails.splice(index, 1);\n            };\n\n            if (userService.isTeacher()) {\n                teamService.getAllFromTeacher(function (teams) {\n                    vm.teams = teams;\n                }, function () {\n                    showMessageToast(DEFAULT_ERROR_MESSAGE);\n                }, function () {});\n            } else {\n                CalendarService.getNotAttendees(locals.calendar).then(function (users) {\n                    vm.notAttendees = users;\n                });\n                CalendarService.getAttendees(locals.calendar).then(function (attendees) {\n                    vm.attendees = attendees;\n                });\n            }\n\n            vm.addAttendee = function (attendee) {\n                vm.calendarEdit.attendee = attendee;\n                CalendarService.addAttendee(vm.calendarEdit).then(function () {\n                    index = vm.notAttendees.indexOf(attendee);\n                    vm.notAttendees.splice(index, 1);\n                    vm.attendees.push({profile_image: attendee.profile_image, email: attendee.email, user: {name: attendee.name}});\n                });\n            };\n\n            vm.removeAttendee = function (attendee) {\n                vm.calendarEdit.attendee = attendee;\n                CalendarService.removeAttendee(vm.calendarEdit).then(function () {\n                    index = vm.attendees.indexOf(attendee);\n                    vm.attendees.splice(index, 1);\n                    vm.notAttendees.push({profile_image: attendee.profile_image, name: attendee.user.name, email: attendee.user.email});\n                });\n            };\n\n            vm.closeModal = function () {\n                $mdDialog.hide();\n            };\n\n            vm.updateCalendar = function (calendar) {\n                CalendarService.updateCalendar(calendar).then(function () {\n                    $mdDialog.hide();\n                });\n            };\n        }\n\n        function EventDialogController($mdDialog, locals) {\n            var vm = this;\n            vm.editing = false;\n            vm.event = {};\n            vm.eventAction = 'Novo evento';\n            vm.calendarsEvent = locals.calendars;\n            vm.colors = colors;\n\n            if (locals.event) {\n                vm.editing = true;\n                var start = new Date(locals.event.start._i);\n                var end = new Date(locals.event.start._i);\n                if (locals.event.end) {\n                    end = new Date(locals.event.end._i);\n                }\n                vm.eventAction = 'Editar evento';\n                vm.event = locals.event;\n                vm.event.summary = locals.event.title;\n                vm.event.all_day = locals.event.allDay;\n                vm.event.begin_date = start;\n                vm.event.end_date = end;\n                if (!vm.event.all_day) {\n                    vm.event.begin_time = start.toLocaleTimeString().substring(0, 5);\n                    vm.event.end_time = end.toLocaleTimeString().substring(0, 5);\n                }\n                changeColor(locals.event.color);\n            }\n\n            vm.showConfirm = function (event) {\n                var confirm = $mdDialog.confirm()\n                        .title('Gostaria de excluir esse evento?')\n                        .ok('Excluir')\n                        .cancel('Cancelar');\n\n                $mdDialog.show(confirm).then(function () {\n                    EventService.destroy(event, function () {\n                        calendarElement.fullCalendar('removeEvents', event.id);\n                        showMessageToast('Evento removido!');\n                    }, function () {\n                        showMessageToast(DEFAULT_ERROR_MESSAGE);\n                    }, function () {});\n                });\n            };\n\n            vm.closeModal = function () {\n                $mdDialog.hide();\n            };\n\n            vm.changeEventColor = function () {\n                changeColor(vm.event.color);\n            };\n\n            function changeColor(color) {\n                index = color;\n                selectedColor = colors[index - 1];\n                if (selectedColor) {\n                    vm.style = \"background-color: \" + selectedColor.background;\n                } else {\n                    vm.style = \"background-color: #9fe1e7\";\n                }\n\n            }\n\n            vm.saveEvent = function () {\n                if (vm.editing) {\n                    updateEvent();\n                } else {\n                    EventService.store(vm.event, function (event) {\n                        $mdDialog.hide();\n                        calendarElement.fullCalendar('renderEvent', event);\n                        showMessageToast('Evento criado!');\n                    }, function () {\n                        showMessageToast(DEFAULT_ERROR_MESSAGE);\n                    }, function () {});\n                }\n            };\n\n            function updateEvent() {\n                EventService.update(vm.event, function (event) {\n                    $mdDialog.hide();\n                    calendarElement.fullCalendar('removeEvents', vm.event.id);\n                    calendarElement.fullCalendar('renderEvent', event);\n                    showMessageToast('Evento editado!');\n                }, function () {\n                    showMessageToast(DEFAULT_ERROR_MESSAGE);\n                }, function () {});\n            }\n        }\n\n    }\n})();","(function () {\n    'use strict';\n\n    angular\n            .module('academic')\n            .controller('ActivityIndexController', ActivityIndexController);\n\n    ActivityIndexController.$inject = ['$rootScope', '$state', '$stateParams', '$mdDialog', 'ActivityService', 'userService'];\n    function ActivityIndexController($rootScope, $state, $stateParams, $mdDialog, ActivityService, userService) {\n        var vm = this;\n        vm.activities = [];\n        vm.isTeacher = false;\n        vm.createActivity = createActivity;\n        vm.editActivity = editActivity;\n        vm.removeActivity = removeActivity;\n        vm.showActivity = showActivity;\n        $rootScope.pageTitle = 'Atividades';\n\n        isTeacher();\n        getActivities();\n\n        function getActivities() {\n            return ActivityService.getActivities($stateParams.id)\n                    .then(function (activities) {\n                        vm.activities = activities;\n                        return vm.activities;\n                    });\n        }\n\n        function createActivity() {\n            $state.go('activitiesCreate', {id: $stateParams.id});\n        }\n\n        function editActivity(activity) {\n            $state.go('activitiesEdit', {id: activity.activity.id});\n        }\n\n        function removeActivity(activity) {\n            var confirm = $mdDialog.confirm()\n                    .title('Gostaria de excluir essa atividade?')\n                    .ok('Excluir')\n                    .cancel('Cancelar');\n\n            $mdDialog.show(confirm).then(function () {\n                ActivityService.removeActivity(activity).then(function () {\n                    var index = vm.activities.indexOf(activity);\n                    vm.activities.splice(index, 1);\n                });\n            });\n        }\n\n        function showActivity(activity) {\n            $state.go('activitiesShow', {id: activity.activity.id});\n        }\n\n        function isTeacher() {\n            vm.isTeacher = userService.isTeacher();\n        }\n    }\n\n})();","(function () {\n    'use strict';\n\n    angular\n        .module('academic')\n        .controller('ActivityCreateController', ActivityCreateController);\n\n    ActivityCreateController.$inject = ['$rootScope', '$state', '$location', '$stateParams', 'ActivityService', 'CalendarService'];\n    function ActivityCreateController($rootScope, $state, $location, $stateParams, ActivityService, CalendarService) {\n        let vm = this;\n        vm.activity = {team_id: $stateParams.id};\n        vm.calendars = [];\n        vm.colors = [\n            {id: 10, background: {\"background-color\": \"#51b749\", \"color\": \"white\"}, name: \"Exercício\"},\n            {id: 5, background: {\"background-color\": \"#fbd75b\", \"color\": \"white\"}, name: \"Atividade avaliativa\"},\n            {id: 11, background: {\"background-color\": \"#dc2127\", \"color\": \"white\"}, name: \"Prova\"}\n        ];\n        vm.storeActivity = storeActivity;\n        vm.back = back;\n        $rootScope.pageTitle = 'Nova Atividade';\n\n        getCalendars();\n\n        function getCalendars() {\n            return CalendarService.getCalendars().then(function (calendars) {\n                vm.calendars = calendars;\n                return vm.calendars;\n            });\n        }\n\n        function storeActivity() {\n            return ActivityService.storeActivity(vm.activity).then(function () {\n                $state.go('activitiesIndex', {id: vm.activity.team_id});\n            });\n        }\n\n        function back() {\n            $location.path($rootScope.previousUrl);\n        }\n    }\n\n})();","(function () {\n    'use strict';\n\n    angular\n            .module('academic')\n            .controller('ActivityEditController', ActivityEditController);\n\n    ActivityEditController.$inject = ['$rootScope', '$state', '$stateParams', 'ActivityService', 'CalendarService'];\n    function ActivityEditController($rootScope, $state, $stateParams, ActivityService, CalendarService) {\n        var vm = this;\n        vm.activity = {};\n        vm.calendars = [];\n        vm.colors = [\n            {id: 10, background: {\"background-color\": \"#51b749\", \"color\": \"white\"}, name: \"Exercício\"},\n            {id: 5, background: {\"background-color\": \"#fbd75b\", \"color\": \"white\"}, name: \"Atividade avaliativa\"},\n            {id: 11, background: {\"background-color\": \"#dc2127\", \"color\": \"white\"}, name: \"Prova\"}\n        ];\n        vm.updateActivity = updateActivity;\n        $rootScope.pageTitle = 'Editar Atividade';\n\n        getCalendars();\n        getActivity();\n\n        function getCalendars() {\n            return CalendarService.getCalendars().then(function (calendars) {\n                vm.calendars = calendars;\n                return vm.calendars;\n            });\n        }\n\n        function getActivity() {\n            return ActivityService.getActivity($stateParams.id).then(function (data) {\n                vm.activity.id = data.activity.id;\n                vm.activity.calendar = data.activity.event.calendar.calendar;\n                vm.activity.summary = data.event.summary;\n                vm.activity.weight = data.activity.weight;\n                vm.activity.total_score = data.activity.total_score;\n                vm.activity.date = new Date(data.date);\n                vm.activity.description = data.event.description;\n                vm.activity.color = data.event.colorId;\n                return vm.activity;\n            });\n        }\n\n        function updateActivity() {\n            return ActivityService.updateActivity(vm.activity).then(function () {\n                $state.go('activitiesIndex');\n            });\n        }\n    }\n\n})();","(function () {\n    'use strict';\n\n    angular\n            .module('academic')\n            .controller('ActivityShowController', ActivityShowController);\n\n    ActivityShowController.$inject = ['$rootScope', '$stateParams', '$mdDialog', 'ActivityService', 'userService'];\n    function ActivityShowController($rootScope, $stateParams, $mdDialog, ActivityService, userService) {\n        var vm = this;\n        vm.activity = {};\n        vm.isTeacher = false;\n        vm.openDetailsDialog = openDetailsDialog;\n        vm.sendEmail = sendEmail;\n        $rootScope.pageTitle = 'Detalhes Atividade';\n\n        isTeacher();\n        getActivity();\n\n        function getActivity() {\n            return ActivityService.showActivity($stateParams.id).then(function (data) {\n                vm.users = data.users;\n                vm.activity = data.activity;\n                return vm.users;\n            });\n        }\n\n        function openDetailsDialog(user, ev) {\n            $mdDialog.show({\n                controller: ActivityUserController,\n                controllerAs: 'vm',\n                templateUrl: 'views/activity/activityUser.html',\n                parent: angular.element(document.body),\n                targetEvent: ev,\n                clickOutsideToClose: true,\n                fullscreen: true,\n                locals: {user: user, activity: vm.activity}\n            });\n        }\n\n        function sendEmail(user) {\n\n        }\n\n        function ActivityUserController(locals) {\n            var vm = this;\n            vm.user = locals.user;\n            vm.activity = locals.activity;\n\n            vm.hide = function () {\n                $mdDialog.hide();\n            };\n\n            vm.cancel = function () {\n                $mdDialog.cancel();\n            };\n\n            vm.conclude = function () {\n                ActivityService.saveDetails(vm.user, vm.activity).then(function () {\n                    $mdDialog.hide();\n                });\n            };\n\n        }\n        \n        function isTeacher() {\n            vm.isTeacher = userService.isTeacher();\n        }\n\n    }\n\n})();","(function () {\n    'use strict';\n\n    angular\n        .module('academic')\n        .controller('GradesController', GradesController);\n\n    GradesController.$inject = ['$rootScope', '$location', '$state', 'ActivityService'];\n    function GradesController($rootScope, $location, $state, ActivityService) {\n        let vm = this;\n        vm.activities = [];\n        vm.back = back;\n\n        ActivityService.getActivitiesFromStudent().then(function (data) {\n            vm.activities = data.activities;\n        });\n\n        function back() {\n            $location.path($rootScope.previousUrl);\n        }\n    }\n\n})();","(function () {\n    'use strict';\n\n    angular\n            .module('academic')\n            .controller('TeamIndexController', TeamIndexController);\n\n    TeamIndexController.$inject = ['$rootScope', '$state', 'teamService'];\n    function TeamIndexController($rootScope, $state, teamService) {\n        var vm = this;\n        vm.teams = [];\n        vm.showTeamActivities = showTeamActivities;\n        $rootScope.pageTitle = 'Turmas';\n\n        getTeams();\n\n        function getTeams() {\n            return teamService.getAllFromTeacher(function (teams) {\n                vm.teams = teams;\n                return vm.teams;\n            }, function () {\n                alert('Error');\n            });\n        }\n\n        function showTeamActivities(team) {\n            $state.go('activitiesIndex', {id: team.id});\n        }\n    }\n\n})();","(function () {\n    'use strict';\n\n    angular\n        .module('academic')\n        .controller('navController', navController);\n\n    navController.$inject = ['$state', '$scope', '$location', '$rootScope', '$mdSidenav', 'userService', 'GoogleService'];\n    function navController($state, $location, $rootScope, $mdSidenav, userService, GoogleService) {\n        let vm = this;\n        vm.toggleLeft = buildToggler('left');\n        vm.goToActivities = goToActivities;\n        vm.goToTeams = goToTeams;\n        vm.doLogout = doLogout;\n        vm.doGoogleLogout = doGoogleLogout;\n\n        function doGoogleLogout() {\n            GoogleService.logout().then(() => {\n                $rootScope.google_authenticated = false;\n                $state.go('home');\n            });\n        }\n\n        function doLogout() {\n            userService.logout();\n            $location.path('/login');\n        }\n\n        function buildToggler(componentId) {\n            return function () {\n                $mdSidenav(componentId).toggle();\n            };\n        }\n\n        function goToActivities() {\n            let user = userService.getCurrentUser();\n            $state.go('activitiesIndex', {id: user.student.team_id});\n        }\n\n        function goToTeams() {\n            $state.go('teamsIndex', {});\n        }\n\n        function navigateTo(state) {\n            $state.go(state, {});\n        }\n    }\n\n})();\n","angular\n        .module('academic')\n        .controller('HomeController', [\n            '$location',\n            '$rootScope',\n            'GoogleService',\n            'localStorageService',\n            function ($location, $rootScope, GoogleService, localStorageService) {\n                $rootScope.pageTitle = 'Início';\n                \n                if (!GoogleService.checkIfIsLogged() && getURLParameter('code')) {\n                    GoogleService.authenticate().then(function () {\n                        $rootScope.google_authenticated = true;\n                        $location.path(localStorageService.get('requestedUrl'));\n                    });\n                }\n\n                function getURLParameter(name) {\n                    return decodeURIComponent((new RegExp('[?|&]' + name + '=' + '([^&;]+?)(&|#|;|$)').exec(location.search) || [null, ''])[1].replace(/\\+/g, '%20')) || null;\n                }\n\n            }]);\n\n"]}