{"version":3,"sources":["loginController.js","registerController.js","CalendarController.js","ActivityIndexController.js","ActivityCreateController.js","ActivityEditController.js","ActivityShowController.js","TeamIndexController.js","navController.js","homeController.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvfile":"controllers.js","sourcesContent":["(function () {\r\n    'use strict';\r\n\r\n    angular\r\n            .module('academic')\r\n            .controller('LoginController', LoginController);\r\n\r\n    LoginController.$inject = ['$state', '$rootScope', '$mdToast', 'userService', 'GoogleService'];\r\n    function LoginController($state, $rootScope, $mdToast, userService, GoogleService) {\r\n        var vm = this;\r\n        vm.user = {};\r\n        vm.doLogin = doLogin;\r\n\r\n        function doLogin() {\r\n            GoogleService.createAuthUrl().then(function (url) { \r\n                $rootScope.googleUrl = url;\r\n                return $rootScope.googleUrl;\r\n            });\r\n\r\n            userService.authenticate(\r\n                    vm.user,\r\n                    function () {\r\n                        showToast('Login efetuado com sucesso!');\r\n                        $state.go('home');\r\n                    },\r\n                    function () {\r\n                        $state.go('register');\r\n                    },\r\n                    function (response) {\r\n                        showToast(response.data.authentication);\r\n                        vm.user.password = '';\r\n                    }\r\n            );\r\n        }\r\n\r\n        function showToast(message) {\r\n            $mdToast.show($mdToast.simple()\r\n                    .textContent(message)\r\n                    .position('bottom right')\r\n                    .hideDelay(4000));\r\n        }\r\n    }\r\n\r\n})();","angular\r\n        .module('academic')\r\n        .controller('RegisterController', ['$scope', '$location', '$mdToast', 'userService', 'teamService', '$rootScope', function ($scope, $location, $mdToast, userService, teamService, $rootScope) {\r\n\r\n                function showToast(message) {\r\n                    $mdToast.show($mdToast.simple()\r\n                            .textContent(message)\r\n                            .position('bottom right')\r\n                            .hideDelay(4000));\r\n                }\r\n\r\n                $scope.userName = userService.getCurrentUser().name;\r\n\r\n                teamService.getAll(function (response) {\r\n                    $scope.teams = response;\r\n                }, function () {\r\n                    showToast('Ocorreram alguns erros durante a comunicação com o serviço. Tente mais tarde.');\r\n                });\r\n\r\n                $scope.doRegister = function () {\r\n                    userService.update(\r\n                            userService.getCurrentUser().id,\r\n                            $scope.user,\r\n                            function (response) {\r\n                                showToast('Registro efetuado com sucesso!');\r\n                                $location.path('/');\r\n                            },\r\n                            function (response) {\r\n                                showToast('Login efetuado com sucesso!');\r\n                                alert('Algo deu errado com o processo de registro. Tente mais tarde.');\r\n                            });\r\n\r\n                };\r\n            }]);","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n            .module('academic')\r\n            .controller('CalendarController', CalendarController);\r\n\r\n    CalendarController.$inject = ['$timeout', '$rootScope', '$mdToast', '$mdDialog', 'CalendarService', 'teamService', 'userService', 'EventService', 'DEFAULT_ERROR_MESSAGE'];\r\n    function CalendarController($timeout, $rootScope, $mdToast, $mdDialog, CalendarService, teamService, userService, EventService, DEFAULT_ERROR_MESSAGE) {\r\n        var vm = this;\r\n        var index;\r\n        var emails = [];\r\n        var calendarIds = [];\r\n        var colors = [];\r\n        var selectedColor;\r\n        var calendarElement = $('#calendar');\r\n        var color = {\r\n            \"1\": {\"background\": \"#a4bdfc\", \"foreground\": \"#1d1d1d\", \"name\": \"Azul Claro\"},\r\n            \"2\": {\"background\": \"#7ae7bf\", \"foreground\": \"#1d1d1d\", \"name\": \"Cerceta\"},\r\n            \"3\": {\"background\": \"#dbadff\", \"foreground\": \"#1d1d1d\", \"name\": \"Roxo\"},\r\n            \"4\": {\"background\": \"#ff887c\", \"foreground\": \"#1d1d1d\", \"name\": \"Rosa\"},\r\n            \"5\": {\"background\": \"#fbd75b\", \"foreground\": \"#1d1d1d\", \"name\": \"Amarelo\"},\r\n            \"6\": {\"background\": \"#ffb878\", \"foreground\": \"#1d1d1d\", \"name\": \"Laranja\"},\r\n            \"7\": {\"background\": \"#46d6db\", \"foreground\": \"#1d1d1d\", \"name\": \"Ciano\"},\r\n            \"8\": {\"background\": \"#e1e1e1\", \"foreground\": \"#1d1d1d\", \"name\": \"Cinza\"},\r\n            \"9\": {\"background\": \"#5484ed\", \"foreground\": \"#1d1d1d\", \"name\": \"Azul\"},\r\n            \"10\": {\"background\": \"#51b749\", \"foreground\": \"#1d1d1d\", \"name\": \"Verde\"},\r\n            \"11\": {\"background\": \"#dc2127\", \"foreground\": \"#1d1d1d\", \"name\": \"Vermelho\"}\r\n        };\r\n        $rootScope.pageTitle = 'Calendários';\r\n\r\n        vm.agendaDay = true;\r\n\r\n        for (var id in color) {\r\n            colors.push(color[id]);\r\n        }\r\n\r\n        getCalendars();\r\n\r\n        $timeout(function () {\r\n            calendarElement.fullCalendar('render');\r\n            bindFullcalendarViewTitle();\r\n        }, 0);\r\n\r\n        vm.uiConfig = {\r\n            calendar: {\r\n                displayEventTime: false,\r\n                height: 'auto',\r\n                editable: false,\r\n                droppable: false,\r\n                titleFormat: 'DD - MMMM YYYY',\r\n                lang: 'pt-br',\r\n                events: {\r\n                    url: laroute.route('events.index'),\r\n                    type: 'post',\r\n                    data: function () {\r\n                        return {\r\n                            ids: getIds()\r\n                        };\r\n                    },\r\n                    error: function () {\r\n                        alert('error');\r\n                    }\r\n                },\r\n                header: {left: '', center: '', right: ''},\r\n                eventClick: function (event, jsEvent, view) {\r\n                    editEvent(event);\r\n                },\r\n                dayClick: function (date, jsEvent, view) {\r\n                    vm.createEvent(date);\r\n                },\r\n                views: {\r\n                    month: {titleFormat: 'MMMM YYYY'},\r\n                    week: {titleFormat: 'MMM DD, YYYY'},\r\n                    day: {titleFormat: 'MMMM DD, YYYY'}\r\n                }\r\n            }\r\n        };\r\n\r\n        vm.calendarAction = function (action) {\r\n            calendarElement.fullCalendar(action);\r\n            bindFullcalendarViewTitle();\r\n        };\r\n\r\n        vm.changeView = function (view) {\r\n            switch (view) {\r\n                case 'agendaDay':\r\n                    vm.agendaDay = false;\r\n                    vm.agendaWeek = true;\r\n                    break;\r\n                case 'agendaWeek':\r\n                    vm.agendaWeek = false;\r\n                    vm.month = true;\r\n                    break;\r\n                case 'month':\r\n                    vm.month = false;\r\n                    vm.agendaDay = true;\r\n                    break;\r\n            }\r\n\r\n            calendarElement.fullCalendar('changeView', view);\r\n            bindFullcalendarViewTitle();\r\n        };\r\n\r\n        vm.refrashEvents = function () {\r\n            refreshEvents();\r\n        };\r\n\r\n        vm.createCalendar = function () {\r\n            $mdDialog.show({\r\n                controller: CalendarCreateDialogController,\r\n                controllerAs: 'vm',\r\n                templateUrl: 'views/calendar/calendarCreate.html',\r\n                parent: angular.element(document.body),\r\n                clickOutsideToClose: true,\r\n                fullscreen: true\r\n            });\r\n        };\r\n\r\n        vm.editCalendar = function (calendar) {\r\n            $mdDialog.show({\r\n                controller: CalendarEditDialogController,\r\n                controllerAs: 'vm',\r\n                templateUrl: 'views/calendar/calendarEdit.html',\r\n                parent: angular.element(document.body),\r\n                clickOutsideToClose: true,\r\n                fullscreen: true,\r\n                locals: {calendar: calendar}\r\n            });\r\n        };\r\n\r\n        vm.destroyCalendar = function (calendar) {\r\n            CalendarService.removeCalendar(calendar).then(function () {\r\n                getCalendars();\r\n            });\r\n        };\r\n\r\n        vm.createEvent = function (date) {\r\n            $mdDialog.show({\r\n                controller: EventDialogController,\r\n                controllerAs: 'vm',\r\n                templateUrl: 'views/event/eventForm.html',\r\n                parent: angular.element(document.body),\r\n                clickOutsideToClose: true,\r\n                fullscreen: true,\r\n                locals: {date: date, calendars: vm.calendars}\r\n            });\r\n        };\r\n\r\n        function editEvent(event) {\r\n            $mdDialog.show({\r\n                controller: EventDialogController,\r\n                controllerAs: 'vm',\r\n                templateUrl: 'views/event/eventForm.html',\r\n                parent: angular.element(document.body),\r\n                clickOutsideToClose: true,\r\n                fullscreen: true,\r\n                locals: {calendars: vm.calendars, event: event}\r\n            });\r\n        }\r\n\r\n        function bindFullcalendarViewTitle() {\r\n            vm.viewTitle = calendarElement.fullCalendar('getView').title;\r\n        }\r\n\r\n        function showMessageToast(message) {\r\n            $mdToast.show($mdToast.simple()\r\n                    .textContent(message)\r\n                    .position('bottom right')\r\n                    .hideDelay(4000));\r\n        }\r\n\r\n        function refreshEvents() {\r\n            calendarElement.fullCalendar('refetchEvents');\r\n            $rootScope.isActionLoading = false;\r\n        }\r\n\r\n        function getCalendars() {\r\n            return CalendarService.getCalendars().then(function (calendars) {\r\n                vm.calendars = calendars;\r\n                refreshEvents();\r\n                return vm.calendars;\r\n            });\r\n        }\r\n\r\n        function getIds() {\r\n            calendarIds = [];\r\n\r\n            angular.forEach(vm.calendars, function (calendar) {\r\n                if (calendar.selected == true) {\r\n                    calendarIds.push(calendar.id);\r\n                }\r\n            });\r\n\r\n            return calendarIds;\r\n        }\r\n\r\n        function CalendarCreateDialogController($mdDialog) {\r\n            var vm = this;\r\n            vm.calendarCreate = {};\r\n            vm.calendarCreate.attendees = [];\r\n            vm.isTeacher = userService.isTeacher();\r\n            vm.storeCalendar = storeCalendar;\r\n            vm.toggleUser = toggleUser;\r\n\r\n            if (userService.isTeacher()) {\r\n                teamService.getAllFromTeacher(function (teams) {\r\n                    $rootScope.isActionLoading = false;\r\n                    vm.teams = teams;\r\n                }, function () {\r\n                    showMessageToast(DEFAULT_ERROR_MESSAGE);\r\n                });\r\n            } else {\r\n                userService.getByTeam(function (users) {\r\n                    $rootScope.isActionLoading = false;\r\n                    vm.users = users;\r\n                }, function () {\r\n                    showMessageToast(DEFAULT_ERROR_MESSAGE);\r\n                });\r\n            }\r\n\r\n            vm.closeModal = function () {\r\n                $mdDialog.hide();\r\n            };\r\n\r\n            function storeCalendar() {\r\n                CalendarService.storeCalendar(vm.calendarCreate).then(function () {\r\n                    getCalendars();\r\n                    $mdDialog.hide();\r\n                });\r\n            }\r\n\r\n            function toggleUser(user) {\r\n                index = emails.indexOf(user.email);\r\n                user.selected ? vm.calendarCreate.attendees.push(user.email) : vm.calendarCreate.attendees.splice(index, 1);\r\n            }\r\n        }\r\n\r\n        function CalendarEditDialogController($mdDialog, locals) {\r\n            var vm = this;\r\n            vm.calendarEdit = locals.calendar;\r\n            vm.isTeacher = userService.isTeacher();\r\n\r\n            vm.toggleUser = function (attendee) {\r\n                index = emails.indexOf(attendee.email);\r\n                attendee.selected ? emails.push(attendee.email) : emails.splice(index, 1);\r\n            };\r\n\r\n            if (userService.isTeacher()) {\r\n                teamService.getAllFromTeacher(function (teams) {\r\n                    vm.teams = teams;\r\n                }, function () {\r\n                    showMessageToast(DEFAULT_ERROR_MESSAGE);\r\n                }, function () {});\r\n            } else {\r\n                CalendarService.getNotAttendees(locals.calendar).then(function (users) {\r\n                    vm.notAttendees = users;\r\n                });\r\n                CalendarService.getAttendees(locals.calendar).then(function (attendees) {\r\n                    vm.attendees = attendees;\r\n                });\r\n            }\r\n\r\n            vm.addAttendee = function (attendee) {\r\n                vm.calendarEdit.attendee = attendee;\r\n                CalendarService.addAttendee(vm.calendarEdit).then(function () {\r\n                    index = vm.notAttendees.indexOf(attendee);\r\n                    vm.notAttendees.splice(index, 1);\r\n                    vm.attendees.push({profile_image: attendee.profile_image, email: attendee.email, user: {name: attendee.name}});\r\n                });\r\n            };\r\n\r\n            vm.removeAttendee = function (attendee) {\r\n                vm.calendarEdit.attendee = attendee;\r\n                CalendarService.removeAttendee(vm.calendarEdit).then(function () {\r\n                    index = vm.attendees.indexOf(attendee);\r\n                    vm.attendees.splice(index, 1);\r\n                    vm.notAttendees.push({profile_image: attendee.profile_image, name: attendee.user.name, email: attendee.user.email});\r\n                });\r\n            };\r\n\r\n            vm.closeModal = function () {\r\n                $mdDialog.hide();\r\n            };\r\n\r\n            vm.updateCalendar = function (calendar) {\r\n                CalendarService.updateCalendar(calendar).then(function () {\r\n                    $mdDialog.hide();\r\n                });\r\n            };\r\n        }\r\n\r\n        function EventDialogController($mdDialog, locals) {\r\n            var vm = this;\r\n            vm.editing = false;\r\n            vm.event = {};\r\n            vm.eventAction = 'Novo evento';\r\n            vm.calendarsEvent = locals.calendars;\r\n            vm.colors = colors;\r\n\r\n            if (locals.event) {\r\n                vm.editing = true;\r\n                var start = new Date(locals.event.start._i);\r\n                var end = new Date(locals.event.start._i);\r\n                if (locals.event.end) {\r\n                    end = new Date(locals.event.end._i);\r\n                }\r\n                vm.eventAction = 'Editar evento';\r\n                vm.event = locals.event;\r\n                vm.event.summary = locals.event.title;\r\n                vm.event.all_day = locals.event.allDay;\r\n                vm.event.begin_date = start;\r\n                vm.event.end_date = end;\r\n                if (!vm.event.all_day) {\r\n                    vm.event.begin_time = start.toLocaleTimeString().substring(0, 5);\r\n                    vm.event.end_time = end.toLocaleTimeString().substring(0, 5);\r\n                }\r\n                changeColor(locals.event.color);\r\n            }\r\n\r\n            vm.showConfirm = function (event) {\r\n                var confirm = $mdDialog.confirm()\r\n                        .title('Gostaria de excluir esse evento?')\r\n                        .ok('Excluir')\r\n                        .cancel('Cancelar');\r\n\r\n                $mdDialog.show(confirm).then(function () {\r\n                    EventService.destroy(event, function () {\r\n                        calendarElement.fullCalendar('removeEvents', event.id);\r\n                        showMessageToast('Evento removido!');\r\n                    }, function () {\r\n                        showMessageToast(DEFAULT_ERROR_MESSAGE);\r\n                    }, function () {});\r\n                });\r\n            };\r\n\r\n            vm.closeModal = function () {\r\n                $mdDialog.hide();\r\n            };\r\n\r\n            vm.changeEventColor = function () {\r\n                changeColor(vm.event.color);\r\n            };\r\n\r\n            function changeColor(color) {\r\n                index = color;\r\n                selectedColor = colors[index - 1];\r\n                if (selectedColor) {\r\n                    vm.style = \"background-color: \" + selectedColor.background;\r\n                } else {\r\n                    vm.style = \"background-color: #9fe1e7\";\r\n                }\r\n\r\n            }\r\n\r\n            vm.saveEvent = function () {\r\n                if (vm.editing) {\r\n                    updateEvent();\r\n                } else {\r\n                    EventService.store(vm.event, function (event) {\r\n                        $mdDialog.hide();\r\n                        calendarElement.fullCalendar('renderEvent', event);\r\n                        showMessageToast('Evento criado!');\r\n                    }, function () {\r\n                        showMessageToast(DEFAULT_ERROR_MESSAGE);\r\n                    }, function () {});\r\n                }\r\n            };\r\n\r\n            function updateEvent() {\r\n                EventService.update(vm.event, function (event) {\r\n                    $mdDialog.hide();\r\n                    calendarElement.fullCalendar('removeEvents', vm.event.id);\r\n                    calendarElement.fullCalendar('renderEvent', event);\r\n                    showMessageToast('Evento editado!');\r\n                }, function () {\r\n                    showMessageToast(DEFAULT_ERROR_MESSAGE);\r\n                }, function () {});\r\n            }\r\n        }\r\n\r\n    }\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n            .module('academic')\r\n            .controller('ActivityIndexController', ActivityIndexController);\r\n\r\n    ActivityIndexController.$inject = ['$rootScope', '$state', '$stateParams', '$mdDialog', 'ActivityService', 'userService'];\r\n    function ActivityIndexController($rootScope, $state, $stateParams, $mdDialog, ActivityService, userService) {\r\n        var vm = this;\r\n        vm.activities = [];\r\n        vm.isTeacher = false;\r\n        vm.createActivity = createActivity;\r\n        vm.editActivity = editActivity;\r\n        vm.removeActivity = removeActivity;\r\n        vm.showActivity = showActivity;\r\n        $rootScope.pageTitle = 'Atividades';\r\n\r\n        isTeacher();\r\n        getActivities();\r\n\r\n        function getActivities() {\r\n            return ActivityService.getActivities($stateParams.id)\r\n                    .then(function (activities) {\r\n                        vm.activities = activities;\r\n                        return vm.activities;\r\n                    });\r\n        }\r\n\r\n        function createActivity() {\r\n            $state.go('activitiesCreate', {id: $stateParams.id});\r\n        }\r\n\r\n        function editActivity(activity) {\r\n            $state.go('activitiesEdit', {id: activity.activity.id});\r\n        }\r\n\r\n        function removeActivity(activity) {\r\n            var confirm = $mdDialog.confirm()\r\n                    .title('Gostaria de excluir essa atividade?')\r\n                    .ok('Excluir')\r\n                    .cancel('Cancelar');\r\n\r\n            $mdDialog.show(confirm).then(function () {\r\n                ActivityService.removeActivity(activity).then(function () {\r\n                    var index = vm.activities.indexOf(activity);\r\n                    vm.activities.splice(index, 1);\r\n                });\r\n            });\r\n        }\r\n\r\n        function showActivity(activity) {\r\n            $state.go('activitiesShow', {id: activity.activity.id});\r\n        }\r\n\r\n        function isTeacher() {\r\n            vm.isTeacher = userService.isTeacher();\r\n        }\r\n    }\r\n\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n            .module('academic')\r\n            .controller('ActivityCreateController', ActivityCreateController);\r\n\r\n    ActivityCreateController.$inject = ['$rootScope', '$state', '$stateParams', 'ActivityService', 'CalendarService'];\r\n    function ActivityCreateController($rootScope, $state, $stateParams, ActivityService, CalendarService) {\r\n        var vm = this;\r\n        vm.activity = {team_id: $stateParams.id};\r\n        vm.calendars = [];\r\n        vm.colors = [\r\n            {id: 10, background: {\"background-color\": \"#51b749\", \"color\": \"white\"}, name: \"Exercício\"},\r\n            {id: 5, background: {\"background-color\": \"#fbd75b\", \"color\": \"white\"}, name: \"Atividade avaliativa\"},\r\n            {id: 11, background: {\"background-color\": \"#dc2127\", \"color\": \"white\"}, name: \"Prova\"}\r\n        ];\r\n        vm.storeActivity = storeActivity;\r\n        $rootScope.pageTitle = 'Nova Atividade';\r\n\r\n        getCalendars();\r\n\r\n        function getCalendars() {\r\n            return CalendarService.getCalendars().then(function (calendars) {\r\n                vm.calendars = calendars;\r\n                return vm.calendars;\r\n            });\r\n        }\r\n\r\n        function storeActivity() {\r\n            return ActivityService.storeActivity(vm.activity).then(function () {\r\n                $state.go('activitiesIndex', {id: vm.activity.team_id});\r\n            });\r\n        }\r\n    }\r\n\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n            .module('academic')\r\n            .controller('ActivityEditController', ActivityEditController);\r\n\r\n    ActivityEditController.$inject = ['$rootScope', '$state', '$stateParams', 'ActivityService', 'CalendarService'];\r\n    function ActivityEditController($rootScope, $state, $stateParams, ActivityService, CalendarService) {\r\n        var vm = this;\r\n        vm.activity = {};\r\n        vm.calendars = [];\r\n        vm.colors = [\r\n            {id: 10, background: {\"background-color\": \"#51b749\", \"color\": \"white\"}, name: \"Exercício\"},\r\n            {id: 5, background: {\"background-color\": \"#fbd75b\", \"color\": \"white\"}, name: \"Atividade avaliativa\"},\r\n            {id: 11, background: {\"background-color\": \"#dc2127\", \"color\": \"white\"}, name: \"Prova\"}\r\n        ];\r\n        vm.updateActivity = updateActivity;\r\n        $rootScope.pageTitle = 'Editar Atividade';\r\n\r\n        getCalendars();\r\n        getActivity();\r\n\r\n        function getCalendars() {\r\n            return CalendarService.getCalendars().then(function (calendars) {\r\n                vm.calendars = calendars;\r\n                return vm.calendars;\r\n            });\r\n        }\r\n\r\n        function getActivity() {\r\n            return ActivityService.getActivity($stateParams.id).then(function (data) {\r\n                vm.activity.id = data.activity.id;\r\n                vm.activity.calendar = data.activity.event.calendar.calendar;\r\n                vm.activity.summary = data.event.summary;\r\n                vm.activity.weight = data.activity.weight;\r\n                vm.activity.total_score = data.activity.total_score;\r\n                vm.activity.date = new Date(data.date);\r\n                vm.activity.description = data.event.description;\r\n                vm.activity.color = data.event.colorId;\r\n                return vm.activity;\r\n            });\r\n        }\r\n\r\n        function updateActivity() {\r\n            return ActivityService.updateActivity(vm.activity).then(function () {\r\n                $state.go('activitiesIndex');\r\n            });\r\n        }\r\n    }\r\n\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n            .module('academic')\r\n            .controller('ActivityShowController', ActivityShowController);\r\n\r\n    ActivityShowController.$inject = ['$rootScope', '$stateParams', '$mdDialog', 'ActivityService', 'userService'];\r\n    function ActivityShowController($rootScope, $stateParams, $mdDialog, ActivityService, userService) {\r\n        var vm = this;\r\n        vm.activity = {};\r\n        vm.isTeacher = false;\r\n        vm.openDetailsDialog = openDetailsDialog;\r\n        vm.sendEmail = sendEmail;\r\n        $rootScope.pageTitle = 'Detalhes Atividade';\r\n\r\n        isTeacher();\r\n        getActivity();\r\n\r\n        function getActivity() {\r\n            return ActivityService.showActivity($stateParams.id).then(function (data) {\r\n                vm.users = data.users;\r\n                vm.activity = data.activity;\r\n                return vm.users;\r\n            });\r\n        }\r\n\r\n        function openDetailsDialog(user, ev) {\r\n            $mdDialog.show({\r\n                controller: ActivityUserController,\r\n                controllerAs: 'vm',\r\n                templateUrl: 'views/activity/activityUser.html',\r\n                parent: angular.element(document.body),\r\n                targetEvent: ev,\r\n                clickOutsideToClose: true,\r\n                fullscreen: true,\r\n                locals: {user: user, activity: vm.activity}\r\n            });\r\n        }\r\n\r\n        function sendEmail(user) {\r\n\r\n        }\r\n\r\n        function ActivityUserController(locals) {\r\n            var vm = this;\r\n            vm.user = locals.user;\r\n            vm.activity = locals.activity;\r\n\r\n            vm.hide = function () {\r\n                $mdDialog.hide();\r\n            };\r\n\r\n            vm.cancel = function () {\r\n                $mdDialog.cancel();\r\n            };\r\n\r\n            vm.conclude = function () {\r\n                ActivityService.saveDetails(vm.user, vm.activity).then(function () {\r\n                    $mdDialog.hide();\r\n                });\r\n            };\r\n\r\n        }\r\n        \r\n        function isTeacher() {\r\n            vm.isTeacher = userService.isTeacher();\r\n        }\r\n\r\n    }\r\n\r\n})();","(function () {\n    'use strict';\n\n    angular\n            .module('academic')\n            .controller('TeamIndexController', TeamIndexController);\n\n    TeamIndexController.$inject = ['$rootScope', '$state', 'teamService'];\n    function TeamIndexController($rootScope, $state, teamService) {\n        var vm = this;\n        vm.teams = [];\n        vm.showTeamActivities = showTeamActivities;\n        $rootScope.pageTitle = 'Turmas';\n\n        getTeams();\n\n        function getTeams() {\n            return teamService.getAllFromTeacher(function (teams) {\n                vm.teams = teams;\n                return vm.teams;\n            }, function () {\n                alert('Error');\n            });\n        }\n\n        function showTeamActivities(team) {\n            $state.go('activitiesIndex', {id: team.id});\n        }\n    }\n\n})();","angular\r\n        .module('academic')\r\n        .controller('navController', [\r\n            '$state',\r\n            '$scope',\r\n            '$location',\r\n            '$rootScope',\r\n            '$mdSidenav',\r\n            'userService',\r\n            'GoogleService',\r\n            function ($state, $scope, $location, $rootScope, $mdSidenav, userService, GoogleService) {\r\n\r\n                $scope.toggleLeft = buildToggler('left');\r\n                $scope.goToActivities = goToActivities;\r\n                $scope.goToTeams = goToTeams;\r\n\r\n                $scope.doLogout = function () {\r\n                    userService.logout();\r\n                    $location.path('/login');\r\n                };\r\n\r\n                $scope.doGoogleLogout = function () {\r\n                    GoogleService.logout().then(function () {\r\n                        $rootScope.google_authenticated = false;\r\n                        $state.go('home');\r\n                    });\r\n                };\r\n\r\n                function buildToggler(componentId) {\r\n                    return function () {\r\n                        $mdSidenav(componentId).toggle();\r\n                    };\r\n                }\r\n                \r\n                function goToActivities(user) {\r\n                    var user = userService.getCurrentUser();\r\n                    $state.go('activitiesIndex', {id: user.student.team_id});\r\n                }\r\n                \r\n                function goToTeams() {\r\n                    $state.go('teamsIndex', {});\r\n                }\r\n\r\n            }]);\r\n","angular\r\n        .module('academic')\r\n        .controller('HomeController', [\r\n            '$location',\r\n            '$rootScope',\r\n            'GoogleService',\r\n            'localStorageService',\r\n            function ($location, $rootScope, GoogleService, localStorageService) {\r\n                $rootScope.pageTitle = 'Início';\r\n                \r\n                if (!GoogleService.checkIfIsLogged() && getURLParameter('code')) {\r\n                    GoogleService.authenticate().then(function () {\r\n                        $rootScope.google_authenticated = true;\r\n                        $location.path(localStorageService.get('requestedUrl'));\r\n                    });\r\n                }\r\n\r\n                function getURLParameter(name) {\r\n                    return decodeURIComponent((new RegExp('[?|&]' + name + '=' + '([^&;]+?)(&|#|;|$)').exec(location.search) || [null, ''])[1].replace(/\\+/g, '%20')) || null;\r\n                }\r\n\r\n            }]);\r\n\r\n"],"sourceRoot":"/source/"}